# -*- coding: utf-8 -*-
###############################################################################
#
# OpenERP, Open Source Management Solution
# Copyright (C) 2001-2015 Micronaet S.r.l. (<http://www.micronaet.it>)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

import os
import sys
import logging
import openerp
import openerp.netsvc as netsvc
import openerp.addons.decimal_precision as dp
from openerp.osv import fields, osv, expression, orm
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
from openerp import SUPERUSER_ID, api
from openerp import tools
from openerp.tools.translate import _
from openerp.tools.float_utils import float_round as round
from openerp.tools import (DEFAULT_SERVER_DATE_FORMAT, 
    DEFAULT_SERVER_DATETIME_FORMAT, 
    DATETIME_FORMATS_MAP, 
    float_compare)


_logger = logging.getLogger(__name__)

"""class account_analytic_account_pricelist(orm.Model):
    Pricelist for analytic account
        
    
    _name = 'account.analytic.account.pricelist'
    _description = 'Analytic account pricelist'
    _rec_name = 'product_id'
    
    # ----------------
    # On change event:
    # ----------------
    def onchange_product(self, cr, uid, ids, product_id, context=None):
        ''' Find cost
        '''
        res = {}
        if not product_id:
            return res
        
        product_proxy = self.pool.get('product.product').browse(
            cr, uid, product_id, context=context)
        res['value'] = {}
        res['value']['cost'] = product_proxy.standard_price or False
        return res

    _columns = {
        'product_id':fields.many2one('product.product', 'Product', 
            required=True),
        'cost': fields.float("Cost", help="Unit Cost for this product line", 
            digits_compute=dp.get_precision('Product Price'), required=True),
        'product_uom': fields.related('product_id', 'uom_id', type='many2one',
            relation = 'product.uom', string = 'UOM'),
        'account_id': fields.many2one('account.analytic.account', 'Account', 
            required=False),
    }"""
# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
